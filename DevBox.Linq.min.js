/*
[Objeto Exemplo]
var listObject = [
    {
        Id : 0,
        Name : "",
        List : [{ Id : 0 , Name : "" }]
    },
    {
        Id : 1,
        Name : "",
        List : [{ Id : 0 , Name : "" }]
    },
]

[Uso LinqJs]
//console.log(listObject.Order());
//console.log(listObject.OrderBy(x => x.Id));
//console.log(listObject.OrderByDesc(x => x.Id));
//console.log(listObject.Where(x => x.Id >= 0 && x.Id <= 2 && x.List.Any(y => y.Id == 1)));
//console.log(listObject.Any(x => x.Id == 0));
//console.log(listObject.All(x => x.Id != 0));
//console.log(listObject.FirstOrDefault(x => x.Id == 0))
//console.log(listObject.Select(x => g = { d: x.Id, c: x.List }));
//console.log(listObject.Remove(x => x.Id == 0));
//console.log(listObject.Skip(1).Take(1));
*/
function ToList(r) { function t() { return this.Array } this.Array = r, this.ToList = t } function EnumOrderBy(r, t) { if (ToList.call(this, r), this.Condition = [], void 0 != t) for (var e = 0; e < t.length; e++) this.Condition.push(t[e]) } function EnumGroupBy() { function r(r) { this.Groups.push(r) } function t(r) { for (var t = [], e = 0; e < this.Groups.length; e++) t.push(this.Groups[e].Key); return t } this.Groups = [], this.SetGroup = r, this.GetKeys = t } function ObjGroupBy(r, t) { ToList.call(this, t), this.Key = r } function getProperties(r) { var t = []; for (var e in r) "function" != typeof r[e] && t.push(e); return t } EnumOrderBy.prototype.ThenBy = function (r) { for (var t = this.Condition, e = this.Array.OrderBy(r).ToList(), i = t.length - 1; i >= 0; i--) e = e.OrderBy(t[i]).ToList(); return this.Condition.push(r), new EnumOrderBy(e, this.Condition) }, EnumOrderBy.prototype.ThenByDesc = function (r) { for (var t = this.Condition, e = this.Array.OrderByDesc(r).ToList(), i = t.length - 1; i >= 0; i--) e = e.OrderByDesc(t[i]).ToList(); return this.Condition.push(r), new EnumOrderBy(e, this.Condition) }, Array.prototype.Order = function () { return this.sort(function (r, t) { return r - t }) }, Array.prototype.OrderBy = function (r) { for (var t = 0; t < this.length; t++) for (var e = t + 1; e < this.length; e++) if (r(this[t]) > r(this[e])) { var i = this[e]; this[e] = this[t], this[t] = i } return new EnumOrderBy(this, [r]) }, Array.prototype.OrderByDesc = function (r) { for (var t = 0; t < this.length; t++) for (var e = t + 1; e < this.length; e++) if (r(this[t]) < r(this[e])) { var i = this[e]; this[e] = this[t], this[t] = i } return new EnumOrderBy(this, [r]) }, Array.prototype.Where = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = [], e = 0; e < this.length; e++) r(this[e]) && t.push(this[e]); return t }, Array.prototype.Any = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = 0; t < this.length; t++) if (r(this[t])) return !0; return cond }, Array.prototype.All = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = 0; t < this.length; t++) if (!r(this[t])) return !1; return !0 }, Array.prototype.FirstOrDefault = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = 0; t < this.length; t++) if (r(this[t])) return this[t]; return null }, Array.prototype.First = function () { return this[0] }, Array.prototype.Select = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = [], e = 0; e < this.length; e++) t.push(r(this[e])); return t }, Array.prototype.Remove = function (r) { if (void 0 == r) return void console.error("Informe a expressão para executar a tarefa."); for (var t = 0; t < this.length; t++) r(this[t]) && this.splice(t, 1) }, Array.prototype.Single = function (r, t) { if (void 0 == t) return 0 == this.length ? null : r(this[0]); for (var e = 0; e < this.length; e++) if (t(this[e])) return r(this[e]); return null }, Array.prototype.Skip = function (r) { if (void 0 == r || isNaN(r)) return void console.error("Informe um valor válido."); if (r > this.length) return void console.error("Valor maior que o indice da lista."); r > this.length && (r = this.length); for (var t = [], e = r; e < this.length; e++) t.push(this[e]); return t }, Array.prototype.Take = function (r) { if (void 0 == r || isNaN(r)) return void console.error("Informe um valor válido."); r > this.length && (r = this.length); for (var t = [], e = 0; r > e; e++) t.push(this[e]); return t }, Array.prototype.For = function (r, t) { if (void 0 == r) return void console.error("Callback não definido."); (void 0 == t || isNaN(t)) && (t = 0), t > this.length && (t = this.length); for (var e = t; e < this.length; e++) r(e, this[e]) }, Array.prototype.Sum = function (r) { var t = this.Select(r), e = 0; return t.For(function (r, t) { e += t }), e }, Array.prototype.Max = function (r) { var t = this.Select(r).Order(); return t[t.length - 1] }, Array.prototype.GroupBy = function (r) { if (this.length <= 0) return []; for (var t = new EnumGroupBy; this.length > 0;) { for (var e = r(this[0]), i = [], o = 0; o < this.length; o++) r(this[o]) == e && i.push(this[o]); for (var n = 0; n < this.length; n++) r(this[n]) == e && this.splice(n, 1); t.SetGroup(new ObjGroupBy(e, i)) } return t }, Array.prototype.Distinct = function () { function r(e, i) { if (e.length > 0) return t(e, i); for (var o = getProperties(e), n = !1, s = 0; s < o.length; s++) if ("object" == typeof e[o[s]]) { if (n = r(e[o[s]], i[o[s]]), !n) break } else { if (e[o[s]] != i[o[s]]) { n = !1; break } n = !0 } return n } function t(t, e) { if (t.length != e.length) return !1; for (var i = 0; i < t.length; i++) if (!r(t[i], e[i])) return !1; return !0 } for (var e = [], i = 0; i < this.length; i++) for (var o = i + 1; o < this.length; o++) r(this[i], this[o]) && e.push({ i1: i, i2: o }); for (var n = [], s = 0; s < e.length; s++) -1 == n.indexOf(e[s].i2) && (n.push(e[s].i2), this.splice(e[s].i2 - i, 1)); return this }, Array.prototype.Count = function (r) { return void 0 == r ? this.length : this.Where(r).length }, Array.prototype.LastOrDefault = function (r) { for (var t = this.length - 1; t > 0; t--) if (condition(this[t])) return this[t]; return null }, Array.prototype.Last = function () { return this[this.length - 1] }, Array.prototype.AddRange = function (r) { for (var t = 0; t < r.length; t++) this.push(r[t]) }, Array.prototype.Exist = function (r) { for (var t = 0; t < this.length; t++) if (r(this[t])) return !0; return !1 };